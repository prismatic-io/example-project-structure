/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import { ConfigVarExpression } from "@prismatic-io/spectral";
import {
  findUserDefinedComponentKey,
  requireIntegrationContext,
} from "@prismatic-io/spectral/dist/serverTypes";
import type { Connection } from "@prismatic-io/spectral/dist/types";

export interface WebhookValues {
  /**
   * Connection
   *
   */
  slackConnection: Connection;
}

/**
 * Receive and validate webhook requests from Slack&#39;s Events API for webhooks you configure.
 *
 * @description Receive and validate webhook requests from Slack's Events API for webhooks you configure.
 * This object is used to support type hinting.
 */
export const webhook = {
  key: "webhook",
  perform: <TReturn>(_values: WebhookValues): Promise<TReturn> =>
    Promise.resolve<TReturn>({} as TReturn),
  inputs: {
    slackConnection: {
      inputType: "connection",
      collection: undefined,
      default: `null`,
      required: true,
    },
  },
} as const;

/**
 * Receive and validate webhook requests from Slack&#39;s Events API for webhooks you configure. Trigger Helper
 *
 * @comments This wrapper function can be used directly in flow definitions.
 */
export const slackWebhook = (values: {
  slackConnection:
    | {
        value: Connection;
      }
    | ConfigVarExpression;
}) => {
  return {
    get component() {
      const context = requireIntegrationContext();
      return findUserDefinedComponentKey(
        "slack",
        true,
        context.componentRegistry
      );
    },
    key: "webhook",
    values,
  } as const;
};
