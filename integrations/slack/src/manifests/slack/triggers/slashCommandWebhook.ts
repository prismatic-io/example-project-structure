/**
 * This file was automatically generated by spectral.
 * Any changes made will be overwritten.
 */
import { ConfigVarExpression } from "@prismatic-io/spectral";
import {
  findUserDefinedComponentKey,
  requireIntegrationContext,
} from "@prismatic-io/spectral/dist/serverTypes";

export interface SlashCommandWebhookValues {
  /**
   * Response Body
   *
   */
  responseBody?: string;
  /**
   * Content Type
   *
   * @default text\/plain
   */
  contentType?: string;
}

/**
 * Trigger for handling slash command and modal webhooks from Slack
 *
 * @description Trigger for handling slash command and modal webhooks from Slack
 * This object is used to support type hinting.
 */
export const slashCommandWebhook = {
  key: "slashCommandWebhook",
  perform: <TReturn>(_values: SlashCommandWebhookValues): Promise<TReturn> =>
    Promise.resolve<TReturn>({} as TReturn),
  inputs: {
    responseBody: {
      inputType: "code",
      collection: undefined,
      default: ``,
    },
    contentType: {
      inputType: "string",
      collection: undefined,
      default: `text\/plain`,
    },
  },
} as const;

/**
 * Trigger for handling slash command and modal webhooks from Slack Trigger Helper
 *
 * @comments This wrapper function can be used directly in flow definitions.
 */
export const slackSlashCommandWebhook = (values: {
  responseBody?:
    | {
        value: string;
      }
    | ConfigVarExpression;
  contentType?:
    | {
        value: string;
      }
    | ConfigVarExpression;
}) => {
  return {
    get component() {
      const context = requireIntegrationContext();
      return findUserDefinedComponentKey(
        "slack",
        true,
        context.componentRegistry
      );
    },
    key: "slashCommandWebhook",
    values,
  } as const;
};
